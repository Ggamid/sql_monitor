from loader import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from states import TruncateData
from keyboards import kb_confirmation
from aiogram.dispatcher.filters import Command

from SQL.wrk_db import get_list_tables, drop_data_in_table


@dp.message_handler(Command("truncate_data"))
async def truncate_data_in(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:üëáüèª\n\n{get_list_tables()}")
    await TruncateData.getTable.set()
    return


@dp.message_handler(state=TruncateData.getTable)
async def get_table_truncate(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "/cancel":
        await message.answer("–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.finish()
        return

    await state.update_data(getTable=answer)

    await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {answer}?', reply_markup=kb_confirmation)

    await TruncateData.confirmation.set()
    return


@dp.message_handler(state=TruncateData.confirmation)
async def confirm_truncate(message: types.Message, state: FSMContext):
    answer = message.text

    if answer == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        table = data.get("getTable")

        drop_data_in_table(table=table)

        await message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        await state.finish()
        return

    elif answer in ["/cancel", "–û—Ç–º–µ–Ω–∏—Ç—å"]:
        await message.answer("–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.finish()
        return
